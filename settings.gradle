plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.8.0'
}

dependencyResolutionManagement {
    versionCatalogs {
        gradlePluginLibs {
            version("spring-boot", "3.2.4")
            version("docker-compose", "0.17.6")
            version("docker-remote-api", "9.3.1")
            version("spring-dependency-management", "1.1.4")

            plugin("spring-boot", "org.springframework.boot").versionRef("spring-boot")
            plugin("spring-dependency-management", "io.spring.dependency-management").versionRef("spring-dependency-management")
            plugin("docker-compose", "com.avast.gradle.docker-compose").versionRef("docker-compose")
            plugin("docker-remote-api", "com.bmuschko.docker-remote-api").versionRef("docker-remote-api")
            plugin("tool-chains", "org.gradle.toolchains.foojay-resolver-convention").version("0.8.0")
        }

        libs {
            library("spring-boot-starter-actuator", "org.springframework.boot", "spring-boot-starter-actuator").withoutVersion()
            library("spring-boot-starter-data-jpa", "org.springframework.boot", "spring-boot-starter-data-jpa").withoutVersion()
            library("spring-boot-starter-web", "org.springframework.boot", "spring-boot-starter-web").withoutVersion()
            library("spring-boot-starter-cache", "org.springframework.boot", "spring-boot-starter-cache").withoutVersion()
            library("spring-boot-starter-validation", "org.springframework.boot", "spring-boot-starter-validation").withoutVersion()
            library("spring-cloud-open-feign", "org.springframework.cloud", "spring-cloud-starter-openfeign").version("4.1.1")
            library("hibernate-spatial", "org.hibernate.orm", "hibernate-spatial").withoutVersion()
            library("hazelcast-spring", "com.hazelcast", "hazelcast-spring").version("5.3.7")

            library("liquibase-core", "org.liquibase", "liquibase-core").withoutVersion()
            library("lombok", "org.projectlombok", "lombok").withoutVersion()
            library("postgresql", "org.postgresql", "postgresql").withoutVersion()

            library("jackson-csv", "com.fasterxml.jackson.dataformat", "jackson-dataformat-csv").version("2.17.0")
        }

        testLibs {
            library("wiremock", "org.wiremock", "wiremock-standalone").version("3.5.2")
            library("spring-boot-starter-test", "org.springframework.boot", "spring-boot-starter-test").withoutVersion()
            library("spring-boot-testcontainers", "org.springframework.boot", "spring-boot-testcontainers").withoutVersion()
            library("testcontainers-junit", "org.testcontainers", "junit-jupiter").withoutVersion()
            library("testcontainers-postgresql", "org.testcontainers", "postgresql").withoutVersion()
        }
    }
}
