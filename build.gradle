import org.gradle.api.plugins.jvm.JvmTestSuite;

plugins {
    id "java"
    id "jvm-test-suite"
    alias(gradlePluginLibs.plugins.spring.boot)
    alias(gradlePluginLibs.plugins.spring.dependency.management)
    alias(gradlePluginLibs.plugins.docker.compose)
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {

    implementation libs.spring.boot.starter.web,
        libs.spring.boot.starter.actuator,
        libs.spring.boot.starter.data.jpa,
        libs.spring.boot.starter.validation,
        libs.spring.cloud.open.feign,
        libs.liquibase.core,
        libs.postgresql,
        libs.jackson.csv,
        libs.hibernate.spatial

    compileOnly libs.lombok

    annotationProcessor libs.lombok
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation testLibs.spring.boot.starter.test
            }
        }

        integrationTest(JvmTestSuite) {
            useJUnitJupiter()

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }

            dependencies {
                implementation project()
                implementation libs.spring.boot.starter.web
                implementation libs.spring.boot.starter.data.jpa
                implementation libs.hibernate.spatial
                implementation testLibs.spring.boot.starter.test
                implementation testLibs.spring.boot.testcontainers
                implementation testLibs.testcontainers.junit
                implementation testLibs.testcontainers.postgresql
                implementation testLibs.wiremock
            }
        }
    }
}

tasks.named("check") {
    dependsOn("integrationTest")
}

dockerCompose {
    projectName = "carpark"
    captureContainersOutput = true
    postgres {
        projectName = "carpark"
        startedServices = ['postgres']
    }
}
